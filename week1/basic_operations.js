/**
 * Базовые операторы, математика
 * 
 * Любой язык программирования умеет работать с базовыми математическими и логическими операциями.
 * В этом уроке мы научимся использовать язык для решения математических операций.
 * 
 * Все мы в школе изучали математику и умеем считать, поэтому изучать язык программирования будет проще именно с математики.
 * Да и в целом по ходу программирования в любом случае необходимо будет использовать операции сложения, умножения, деления и другие
 */

/**
 * Это очень важный урок. Помимо базовых математических операций мы еще научимся преобразовывать один тип в другой
 * Например число в строку или наоборот
 * Это очень скользкая тема которая работает по разному в других языках программирования.
 * Более того преоборазование типов очень часто будет использоваться на практике и необходимо хорошо знать как это работает в javascript
 * для того чтобы не допускать серьзных ошибок или хотя бы быстро находить баги.
 */

/**
 * Давайте для начала создадим две переменные с числовым типом и выполним несколько операций с ними
 * Для того чтобы убедиться что базовые математические операции работают так как мы предполагаем
 */

let x = 5;
let y = 10;

console.log(x + y); // сложение
console.log(x - y); // вычетание
console.log(x * y); // умножение
console.log(x / y); // деление
console.log(x % y); // остаток от деления
console.log(x ** y); // возведение в степень

/**
 * Все мы со школы знаем что с помощью базовых математических операций можно оперировать числами
 * 
 * Но в программировании можно немного больше. С помощью математических операций можно также оперировать
 * не только числами но строковыми типами, логическими типами, и даже объектами
 * 
 * Посмотрим на примере, что из этого получается
 */

let firstName = 'John';
let lastName = 'Smith';

console.log(firstName + lastName);
console.log(firstName + " " + lastName);

/**
 * Есть еще одна особенность. Если хотя бы один из операндов будет строкой, а второй например числом
 * То операция сложения преобразует число в троку и сложит их как строки
 * Результат будет не число 13, а строка 112
 * 
 * Также стоит обратить внимание, если операндов будет больше чем 2
 * то операции будут происходить друг за другом. В данном случае javascript
 * сначала сложит числа как числа, а затем преобразует результат в строку
 * в последнем примере результат будет строка 212
 */

console.log(1 + '12'); // 112
console.log(1 + 1 + '12') // 212


/**
 * Как же работаю другие операторы с нечисловыми значениями?
 * особенность в том, что только оператор плюс объединяет результат в строку
 * Все остальные операторы превращают строки в числа перед получением резульата
*/

console.log(2 - '1'); // 1
console.log('1' - '1') // 0

/**
 * Как работает унарный + ?
 * 
 * до этого мы использовали + как бинарный оператор. То есть применяли к более чем одному значению.
 * Унарный оператор применяется к одному значению и не производит никаких операций.
 * В случае с унарным + он будет наоборот приводить все значения к числу.
*/

console.log(+"12") // 12
console.log(+true) // 1
console.log(+"") // 0

/**
 * Выглядит немного странно, но чуть позже мы разберемся как это работает
 */

/**
 * То что мы сделали называется преобразование типов
 * 
 * Необходимость преобразовывать строки в числа будет очень часто встречаться на практике.
 * например при получении значения из поля ввода input оно будет в виде строки. Поэтому если будет необходимость
 * работать со значением как с числом, то нужно сначала преобразовать его в число
 * 
 * Представим что у нас есть два числа, которые мы получили из html в виде строк.
 * например цены на продукты в корзине. И хоти посчитать их сумму
 */

let item1 = '123';
let item2 = '45';

console.log(item1 + item2); // '12345'
console.log(+item1 + +item2); // 168

// Приоритет операций

/** Как и в математике первоочередный приоритет отдается операциям умножения и деления
 * а также операциям внутри скобок.
 * 
 * Также стоит запомнить что наивысший приоритет отдается унарным операторам. Все остальные приоритеты
 * идут как в математике. Если есть сомнения или хочется узнать подробнее о приоритетах
 * то есть таблица приоритетов. Но смысла ее запоминать особо нет, так как тут все логично.
 */
 console.log( x + y * y ); // 105
 console.log( (x + y) * y ); // 150
 
 /**
  * Логические операции
  */

 