console.log("Hello World!");

// ==== Переменные и типы данных ======

/** 
 * В любом языке программирования переменные являются важной составляющей
 * С переменными вы будете работать всегда, и изучать программировоание не понимая
 * что такое переменные просто невозможно
 * 
 * В этом небольшом уроке мы затронем следующие темы
 * s
 * 1. Что такое переменная
 * 2. Способы создания переменной и отличия var, let, const
 * 3. Правила наименования переменных
 * 4. Типы данных
 * 5. typeof. особенности типов в js
 * */

/**
 * легче всего воспринимать переменную в языках программирования как ячейку или коробочку, в которую мы что-то кладем
 * и самое важное к которой мы можем потом обращаться в вдальнейшем в коде приложения
 * 
 * То есть основное преимущество использования переменных в javascript это переиспользование
 * */

var name = 'John';

/**
 * Создает как локальную так и глобальную переменную
*/
var name = 'Nikita'; // string
carName = 'Mazda'; // Так делать не рекомендуется

/**
 * Создает только локальную переменную
 * Ну него есть некоторое отличе создания локальных переменных в отличе от var
 * тут стоить косвенно затронуть области видимости. У javascript стандартно 2 области видимости глобальная и область видимости функции
 * Создание переменной через дерективу let позволяет добавить еще одну область видимости в рамках фигурных скобок {}
 * Переменная созданная внутри скобок будет не видна снаружи. Про области видимости мы поговорим подробнее в дальнейшем
*/
let age = 26; // number

if (true) {
    let name = 'John';
    console.log(name);
}

console.log(name); // Переменная не видна в коде

if (true) {
    var name = 'John';
    console.log(name);
}

console.log(name); // Переменная не видна в коде

/** 
 * Еще одним отличем var от let является поднятие переменной или hoisting
 * hoisting говорит о том, что можно обратиться к переменной до ее создания
*/

console.log(x); // x === undefined
var x = 1;

console.log(y); // Ошибка ReferenceError
let y = 2;


/** 
 * Можно создать переменную без присвоения значения
 * В таком случае стандартным значением переменной будет undefined 
 *
*/
let bonusProgram; // Объявил переменную, бонусная программа

// В данном случае bonusProgram === undefined будет true и выполнится первый блок условия
if (bonusProgram === undefined) {
    calcPriceForGuest(); // Если значение бонусной программы не определено, то выполняем одну функцию рассчета стоимости
} else {
    calcPriceForCustomer(); //  вином случае выполняем другую функцию
}


/**
 * Как и let создает локальную переменную.
 * Особенность создания пременных через const в том, что эти переменные нельзя переопределять, они хранят неизменяемые значения
 * Мы не можем присвоить новое значение переменной
 * Также принято именовать константы через заглавные буквы. С точки зрения функциональности это ни на что не влияет, но при чтения кода приложения
 * другим разработчикам и вам будет понятно, что эта переменная является константой и ее нельзя изменять
*/
const BIRTH_DATE = '18.08.1995';


// Ошибка!
// birthDate = '20.08.1995';

// Нельзя повторно объявлять переменную
// let age = 27;

// а так можно. В некоторых языках мы не можем использовать старую переменную
// Но в в большинстве языков это возможно
age = 27;

/** Пру слов о правилах наименовавния переменных  в javascript 
 * Имена переменных могут содержать только буквы, цифры и символы &, _
 * При этом переменная не может начинаться с цифры
 * 
 * Регистрозависимы. Желательно писать на англ (но можно и другие языки)
 * Нельзя использовать зарезервированные имена https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Lexical_grammar#Ключевые_слова
 * Придумывать говорящие имена переменным
*/


/** 
 * ====== Зачем нужен use strict ======
 * 
 * Убирает возможность использования плохих практик написания кода на js
 * */



/** ====== Типы данных ====== */ 

/** Примитивные и ссылочные
*
* Вкратце пройтись по каждому типу
*
* */

/** Какие данные можно класть в переменные?
 * 
 * Когда мы записываем в переменную какое-то значение, то это значение имеет определенный тип
 * в JavaScript 8 типов данных. Сейчас мы в кратце рассмотри каждый тип
*/
let productName = 'phone'; // string
let price = 123.5; // number
let productId = 1234123n; // bigInt

// boolean true / false
// Могут быть результатом сравнений
let isGreater = 20 > 1; // true
let active = true;
let category = null; // Значение не известно. Используется обычно для присвоения переменной пустого значения
let tax; // значение переменной undefined. Обычно используется для проверокк, что переменная не была назначена

// Объект. Вкратце для чего нужны объекты?
let user = {};
user = {
    name: 'Nikita',
    age: 26,
}
let arr = [1,2,3,4];


// Как определить тип? оператор  typeof
console.log(typeof "Hello"); // string
console.log(typeof 1); // number
console.log(typeof 1n); // bigint
console.log(typeof false); // boolean
console.log(typeof Symbol()); // boolean
console.log(typeof null); // Почему null как объект? Общепризнанная ошибка typeof еще со времен создания js. В новых версиях ее не убирают для сохранения совместимости
console.log(typeof undefined); // undefined
console.log(typeof console); // object
console.log(typeof console.log); // function

/** 
 * 
 * Стоит отметить, что существуют языки с динамической и статической типизацией
 * В языках со статической типизацией помимо значения переменной мы также казываем ее тип,
 * который говорит о том, что данной переменной нельзя присвоить значение другого типа
 * 
 * JavaScript это язык с динамической типизацией
 * Это значит, что мы строго не устанавливваем тип переменной и можем присвоить значение любого типа
*/

let price = '123.5';
price = 123.5;

/** 
 * У статической и динамической типизации есть свои достоинства и недостатки и вообще это очень холиварная тема
 * которую мы рассмотрим позднее
*/


/**
 * ====== Summary =======
 * 
* В JavaScript есть 8 основных типов.
    number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
    bigint для целых чисел произвольной длины.
    string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
    boolean для true/false.
    null для неизвестных значений – отдельный тип, имеющий одно значение null.
    undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
    object для более сложных структур данных.
    symbol для уникальных идентификаторов.
* */


/**
 * 
 * ===== Домашка =====
 * 
 * В качестве закрепления работы с переменными
 * Предлагаю придумать названия переменным для продукта в интернет магазине и присвоить им произвольные значения
 *
 * Название продукта
 * Цена продукта
 * Уникальный номер продкута
 * Категория продукта
 * Активирован или нет продукт
 * 
 */